{"version":3,"sources":["Img/bt2.png","Img/1.png","Img/2.png","Img/3.png","Img/5.png","Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","props","outerStyle","position","top","left","width","height","overflow","zIndex","style","modal","boxSizing","margin","borderRadius","textAlign","boxShadow","overlay","bottom","right","backgroundColor","this","display","isModalOpen","onClick","closeModal","children","React","Component","App","useState","setOpen","className","s","src","bt2","alt","backgroundImage","bg1","bg2","bg3","bg5","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,qBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,iNC2D5BC,E,kDAxDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,WAAa,CACdC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,SAAU,OACVC,OAAQ,GAIZ,EAAKC,MAAQ,CACTC,MAAO,CACHR,SAAU,WACVG,MAAO,IAEPM,UAAW,aAEXC,OAAQ,aACRC,aAAc,EACdL,OAAQ,EACRM,UAAW,OACXC,UAAW,kCAEfC,QAAS,CACLd,SAAU,QACVC,IAAK,EACLc,OAAQ,EACRb,KAAM,EACNc,MAAO,EACPb,MAAO,OACPC,OAAQ,OACRa,gBAAiB,oBAnCV,E,qDA0Cf,OACI,yBACIV,MAAK,2BACEW,KAAKnB,YADP,IAEDoB,QAASD,KAAKpB,MAAMsB,YAAc,QAAU,UAGhD,yBAAKb,MAAOW,KAAKX,MAAMO,QAASO,QAASH,KAAKpB,MAAMwB,aACpD,yBAAKf,MAAOW,KAAKX,MAAMC,OAAQU,KAAKpB,MAAMyB,e,GAnDtCC,IAAMC,W,iFCmDXC,MAxCf,WAAgB,IAAD,EAEiBC,oBAAS,GAF1B,mBAEPP,EAFO,KAEMQ,EAFN,KAId,OACC,yBAAKC,UAAU,OAEd,kBAAC,EAAD,CACCT,YAAaA,EACbE,WAAY,SAAAQ,GAAC,OAAIF,GAAQ,KAEzB,yBACCzB,MAAM,OACN4B,IAAKC,IACLC,IAAI,cAKN,yBAAKJ,UAAU,QAAQtB,MAAO,CAAE2B,gBAAgB,OAAD,OAASC,IAAT,QAI/C,yBAAKN,UAAU,QAAQtB,MAAO,CAAE2B,gBAAgB,OAAD,OAASE,IAAT,OAC9C,yBAAKL,IAAKC,IAAKH,UAAU,MAAMR,QAAS,SAAAS,GAAC,OAAIF,GAAQ,OAKtD,yBAAKC,UAAU,QAAQtB,MAAO,CAAE2B,gBAAgB,OAAD,OAASG,IAAT,QAI/C,yBAAKR,UAAU,QAAQtB,MAAO,CAAE2B,gBAAgB,OAAD,OAASI,IAAT,UClC9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f9ecefc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bt2.e9707331.png\";","module.exports = __webpack_public_path__ + \"static/media/1.7fbfd8cd.png\";","module.exports = __webpack_public_path__ + \"static/media/2.4e2a4b6d.png\";","module.exports = __webpack_public_path__ + \"static/media/3.7efb1d7c.png\";","module.exports = __webpack_public_path__ + \"static/media/5.c55263b8.png\";","import React from 'react';\r\n\r\nclass Modal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.outerStyle = {\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            overflow: \"auto\",\r\n            zIndex: 1\r\n        };\r\n\r\n        // default style\r\n        this.style = {\r\n            modal: {\r\n                position: \"relative\",\r\n                width: 500,\r\n                // padding: 20,\r\n                boxSizing: \"border-box\",\r\n                // backgroundColor: \"#fff\",\r\n                margin: \"100px auto\",\r\n                borderRadius: 3,\r\n                zIndex: 2,\r\n                textAlign: \"left\",\r\n                boxShadow: \"0 20px 30px rgba(0, 0, 0, 0.2)\",\r\n            },\r\n            overlay: {\r\n                position: \"fixed\",\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0,\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                backgroundColor: \"rgba(0,0,0,0.5)\",\r\n            }\r\n        };\r\n    }\r\n\r\n    // render modal\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    ...this.outerStyle,\r\n                    display: this.props.isModalOpen ? \"block\" : \"none\"\r\n                }}\r\n            >\r\n                <div style={this.style.overlay} onClick={this.props.closeModal} />\r\n                <div style={this.style.modal}>{this.props.children}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react';\nimport './App.css';\nimport Modal from './Modal';\n\nimport bg1 from './Img/1.png';\nimport bg2 from './Img/2.png';\nimport bg3 from './Img/3.png';\nimport bg5 from './Img/5.png';\n\n\nimport bt2 from './Img/bt2.png';\n\n\nfunction App() {\n\n\tconst [isModalOpen, setOpen] = useState(false);\n\n\treturn (\n\t\t<div className=\"App\">\n\n\t\t\t<Modal\n\t\t\t\tisModalOpen={isModalOpen}\n\t\t\t\tcloseModal={s => setOpen(false)}\n\t\t\t>\n\t\t\t\t<img\n\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\tsrc={bt2}\n\t\t\t\t\talt=\"unsplash\"\n\t\t\t\t/>\n\t\t\t</Modal>\n\n\n\t\t\t<div className=\"Comic\" style={{ backgroundImage: `url(${bg1})` }}>\n\n\t\t\t</div>\n\n\t\t\t<div className=\"Comic\" style={{ backgroundImage: `url(${bg2})` }}>\n\t\t\t\t<img src={bt2} className=\"bt2\" onClick={s => setOpen(true)}>\n\n\t\t\t\t</img>\n\t\t\t</div>\n\n\t\t\t<div className=\"Comic\" style={{ backgroundImage: `url(${bg3})` }}>\n\n\t\t\t</div>\n\n\t\t\t<div className=\"Comic\" style={{ backgroundImage: `url(${bg5})` }}>\n\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}